using NiaBukkit.API.Blocks.Data;
using NiaBukkit.API.Particle;
using NiaBukkit.API.Sounds;
using NiaBukkit.API.Util;
using NiaBukkit.Network;

namespace NiaBukkit.API.Blocks
{
    public static class BlockFactory
    {
        public static readonly BlockData Air = Init(new BlockData(Material.Air));
        public static readonly BlockData Stone = Init(new BlockData(Material.Stone).SetBreakData(1.5F, 6));
        public static readonly BlockData Granite = Init(new BlockData(Material.Granite).SetBreakData(1.5F, 6));
        public static readonly BlockData PolishedGranite = Init(new BlockData(Material.PolishedGranite).SetBreakData(1.5F, 6));
        public static readonly BlockData Diorite = Init(new BlockData(Material.Diorite).SetBreakData(1.5F, 6));
        public static readonly BlockData PolishedDiorite = Init(new BlockData(Material.PolishedDiorite).SetBreakData(1.5F,6));
        public static readonly BlockData Andesite = Init(new BlockData(Material.Andesite).SetBreakData(1.5F, 6));
        public static readonly BlockData PolishedAndesite = Init(new BlockData(Material.PolishedAndesite).SetBreakData(1.5F, 6));
        public static readonly BlockData GrassBlock = Init(new BlockGrass(Material.GrassBlock).SetDurability(.6F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData Dirt = Init(new BlockData(Material.Dirt).SetDurability(.5F).SetSound(SoundEffectType.DirtEffect));
        public static readonly BlockData CoarseDirt = Init(new BlockData(Material.CoarseDirt).SetDurability(.5F).SetSound(SoundEffectType.DirtEffect));
        public static readonly BlockData Podzol = Init(new BlockDirtSnow(Material.Podzol).SetDurability(.5F).SetSound(SoundEffectType.DirtEffect));
        public static readonly BlockData Cobblestone = Init(new BlockData(Material.Cobblestone).SetBreakData(2, 6));
        public static readonly BlockData OakPlanks = Init(new BlockData(Material.OakPlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData SprucePlanks = Init(new BlockData(Material.SprucePlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData BirchPlanks = Init(new BlockData(Material.BirchPlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData JunglePlanks = Init(new BlockData(Material.JunglePlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData AcaciaPlanks = Init(new BlockData(Material.AcaciaPlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData DarkOakPlanks = Init(new BlockData(Material.DarkOakPlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData OakSapling;
        public static readonly BlockData SpruceSapling;
        public static readonly BlockData BirchSapling;
        public static readonly BlockData JungleSapling;
        public static readonly BlockData AcaciaSapling;
        public static readonly BlockData DarkOakSapling;
        public static readonly BlockData Bedrock = Init(new BlockData(Material.Bedrock).SetBreakData(-1, 3600000));
        public static readonly BlockData Water;
        public static readonly BlockData Lava;
        public static readonly BlockData Sand;
        public static readonly BlockData RedSand;
        public static readonly BlockData Gravel;
        public static readonly BlockData GoldOre;
        public static readonly BlockData IronOre;
        public static readonly BlockData CoalOre;
        public static readonly BlockData NetherGoldOre;
        public static readonly BlockData OakLog = Init(new BlockRotatable(Material.OakLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData SpruceLog = Init(new BlockRotatable(Material.SpruceLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData BirchLog = Init(new BlockRotatable(Material.BirchLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData JungleLog = Init(new BlockRotatable(Material.JungleLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData AcaciaLog = Init(new BlockRotatable(Material.AcaciaLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData DarkOakLog = Init(new BlockRotatable(Material.DarkOakLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedSpruceLog = Init(new BlockRotatable(Material.StrippedSpruceLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedBirchLog = Init(new BlockRotatable(Material.StrippedBirchLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedJungleLog = Init(new BlockRotatable(Material.StrippedJungleLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedAcaciaLog = Init(new BlockRotatable(Material.StrippedAcaciaLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedDarkOakLog = Init(new BlockRotatable(Material.StrippedDarkOakLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedOakLog = Init(new BlockRotatable(Material.StrippedOakLog).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData OakWood = Init(new BlockRotatable(Material.OakWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData SpruceWood = Init(new BlockRotatable(Material.SpruceWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData BirchWood = Init(new BlockRotatable(Material.BirchWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData JungleWood = Init(new BlockRotatable(Material.JungleWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData AcaciaWood = Init(new BlockRotatable(Material.AcaciaWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData DarkOakWood = Init(new BlockRotatable(Material.DarkOakWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedOakWood = Init(new BlockRotatable(Material.StrippedOakWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedSpruceWood = Init(new BlockRotatable(Material.StrippedSpruceWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedBirchWood = Init(new BlockRotatable(Material.StrippedBirchWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedJungleWood = Init(new BlockRotatable(Material.StrippedJungleWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedAcaciaWood = Init(new BlockRotatable(Material.StrippedAcaciaWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData StrippedDarkOakWood = Init(new BlockRotatable(Material.StrippedDarkOakWood).SetDurability(2).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData OakLeaves = Init(new BlockLeaves(Material.OakLeaves).SetDurability(.2F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData SpruceLeaves = Init(new BlockLeaves(Material.SpruceLeaves).SetDurability(.2F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData BirchLeaves = Init(new BlockLeaves(Material.BirchLeaves).SetDurability(.2F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData JungleLeaves = Init(new BlockLeaves(Material.JungleLeaves).SetDurability(.2F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData AcaciaLeaves = Init(new BlockLeaves(Material.AcaciaLeaves).SetDurability(.2F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData DarkOakLeaves = Init(new BlockLeaves(Material.DarkOakLeaves).SetDurability(.2F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData Sponge;
        public static readonly BlockData WetSponge;
        public static readonly BlockData Glass = Init(new BlockData(Material.Glass).SetDurability(.3F).SetSound(SoundEffectType.GlassEffect));
        public static readonly BlockData LapisOre;
        public static readonly BlockData LapisBlock = Init(new BlockData(Material.LapisBlock).SetBreakData(3, 3));
        public static readonly BlockData Dispenser;
        public static readonly BlockData Sandstone = Init(new BlockData(Material.Sandstone).SetDurability(.8F));
        public static readonly BlockData ChiseledSandstone = Init(new BlockData(Material.ChiseledSandstone).SetDurability(.8F));
        public static readonly BlockData CutSandstone = Init(new BlockData(Material.CutSandStone).SetDurability(.8F));
        public static readonly BlockData NoteBlock;
        public static readonly BlockData WhiteBed;
        public static readonly BlockData OrangeBed;
        public static readonly BlockData MagentaBed;
        public static readonly BlockData LightBlueBed;
        public static readonly BlockData YellowBed;
        public static readonly BlockData LimeBed;
        public static readonly BlockData PinkBed;
        public static readonly BlockData GrayBed;
        public static readonly BlockData LightGrayBed;
        public static readonly BlockData CyanBed;
        public static readonly BlockData PurpleBed;
        public static readonly BlockData BlueBed;
        public static readonly BlockData BrownBed;
        public static readonly BlockData GreenBed;
        public static readonly BlockData RedBed;
        public static readonly BlockData BlackBed;
        public static readonly BlockData PoweredRail;
        public static readonly BlockData DetectorRail;
        public static readonly BlockData StickyPiston;
        public static readonly BlockData Cobweb;
        public static readonly BlockData Grass;
        public static readonly BlockData Fern;
        public static readonly BlockData DeadBush;
        public static readonly BlockData Seagrass;
        public static readonly BlockData TallSeagrass;
        public static readonly BlockData Piston;
        public static readonly BlockData PistonHead;
        public static readonly BlockData WhiteWool = Init(new BlockData(Material.WhiteWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData OrangeWool = Init(new BlockData(Material.OrangeWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData MagentaWool = Init(new BlockData(Material.MagentaWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData LightBlueWool = Init(new BlockData(Material.LightBlueWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData YellowWool = Init(new BlockData(Material.YellowWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData LimeWool = Init(new BlockData(Material.LimeWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData PinkWool = Init(new BlockData(Material.PinkWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData GrayWool = Init(new BlockData(Material.GrayWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData LightGrayWool = Init(new BlockData(Material.LightGrayWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData CyanWool = Init(new BlockData(Material.CyanWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData PurpleWool = Init(new BlockData(Material.PurpleWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData BlueWool = Init(new BlockData(Material.BlueWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData BrownWool = Init(new BlockData(Material.BrownWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData GreenWool = Init(new BlockData(Material.GreenWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData RedWool = Init(new BlockData(Material.RedWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData BlackWool = Init(new BlockData(Material.BlackWool).SetDurability(.8F).SetSound(SoundEffectType.WoolEffect));
        public static readonly BlockData MovingPiston;
        public static readonly BlockData Dandelion;
        public static readonly BlockData Poppy;
        public static readonly BlockData BlueOrchid;
        public static readonly BlockData Allium;
        public static readonly BlockData AzureBluet;
        public static readonly BlockData RedTulip;
        public static readonly BlockData OrangeTulip;
        public static readonly BlockData WhiteTulip;
        public static readonly BlockData PinkTulip;
        public static readonly BlockData OxeyeDaisy;
        public static readonly BlockData Cornflower;
        public static readonly BlockData WitherRose;
        public static readonly BlockData LilyOfTheValley;
        public static readonly BlockData BrownMushroom;
        public static readonly BlockData RedMushroom;
        public static readonly BlockData GoldBlock = Init(new BlockData(Material.GoldBlock).SetBreakData(3, 6).SetSound(SoundEffectType.MetalEffect));
        public static readonly BlockData IronBlock = Init(new BlockData(Material.IronBlock).SetBreakData(5, 6).SetSound(SoundEffectType.MetalEffect));
        public static readonly BlockData Bricks = Init(new BlockData(Material.Bricks).SetBreakData(2, 6));
        public static readonly BlockData Tnt;
        public static readonly BlockData Bookshelf;
        public static readonly BlockData MossyCobblestone = Init(new BlockData(Material.MossyCobblestone).SetBreakData(2, 6));
        public static readonly BlockData Obsidian = Init(new BlockData(Material.Obsidian).SetBreakData(50, 1200));
        public static readonly BlockData Torch = Init(new BlockTorch(Material.Torch, Particles.Flame).SetSound(SoundEffectType.WoodEffect).SetLight(14));
        public static readonly BlockData WallTorch = Init(new BlockTorchWall(Material.WallTorch, Particles.Flame).SetSound(SoundEffectType.WoodEffect).SetLight(14));
        public static readonly BlockData Fire;
        public static readonly BlockData SoulFire;
        public static readonly BlockData Spawner;
        public static readonly BlockData OakStairs = Init(new BlockStairs(OakPlanks, Material.OakStairs));
        public static readonly BlockData Chest;
        public static readonly BlockData RedstoneWire;
        public static readonly BlockData DiamondOre;
        public static readonly BlockData DiamondBlock = Init(new BlockData(Material.DiamondBlock).SetBreakData(5, 6).SetSound(SoundEffectType.MetalEffect));
        public static readonly BlockData CraftingTable;
        public static readonly BlockData Wheat;
        public static readonly BlockData Farmland;
        public static readonly BlockData Furnace;
        public static readonly BlockData OakSign;
        public static readonly BlockData SpruceSign;
        public static readonly BlockData BirchSign;
        public static readonly BlockData AcaciaSign;
        public static readonly BlockData JungleSign;
        public static readonly BlockData DarkOakSign;
        public static readonly BlockData OakDoor;
        public static readonly BlockData Ladder;
        public static readonly BlockData Rail;
        public static readonly BlockData CobblestoneStairs = Init(new BlockStairs(Cobblestone, Material.CobblestoneStairs));
        public static readonly BlockData OakWallSign;
        public static readonly BlockData SpruceWallSign;
        public static readonly BlockData BirchWallSign;
        public static readonly BlockData AcaciaWallSign;
        public static readonly BlockData JungleWallSign;
        public static readonly BlockData DarkOakWallSign;
        public static readonly BlockData Lever;
        public static readonly BlockData StonePressurePlate;
        public static readonly BlockData IronDoor;
        public static readonly BlockData OakPressurePlate;
        public static readonly BlockData SprucePressurePlate;
        public static readonly BlockData BirchPressurePlate;
        public static readonly BlockData JunglePressurePlate;
        public static readonly BlockData AcaciaPressurePlate;
        public static readonly BlockData DarkOakPressurePlate;
        public static readonly BlockData RedstoneOre;
        public static readonly BlockData RedstoneTorch;
        public static readonly BlockData RedstoneWallTorch;
        public static readonly BlockData StoneButton;
        public static readonly BlockData Snow;
        public static readonly BlockData Ice;
        public static readonly BlockData SnowBlock;
        public static readonly BlockData Cactus;
        public static readonly BlockData Clay = Init(new BlockData(Material.Clay).SetDurability(.6F).SetSound(SoundEffectType.GravelEffect));
        public static readonly BlockData SugarCane;
        public static readonly BlockData Jukebox;
        public static readonly BlockData OakFence = Init(new BlockFence(Material.OakFence).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData Pumpkin;
        public static readonly BlockData Netherrack;
        public static readonly BlockData SoulSand;
        public static readonly BlockData SoulSoil;
        public static readonly BlockData Basalt;
        public static readonly BlockData PolishedBasalt;
        public static readonly BlockData SoulTorch = Init(new BlockTorch(Material.SoulTorch, Particles.SoulFireFlame).SetSound(SoundEffectType.WoodEffect).SetLight(10));
        public static readonly BlockData SoulWallTorch;
        public static readonly BlockData Glowstone = Init(new BlockData(Material.Glowstone).SetDurability(.3F).SetSound(SoundEffectType.GlassEffect).SetLight(15));
        public static readonly BlockData NetherPortal;
        public static readonly BlockData CarvedPumpkin;
        public static readonly BlockData JackOLantern;
        public static readonly BlockData Cake;
        public static readonly BlockData Repeater;
        public static readonly BlockData WhiteStainedGlass;
        public static readonly BlockData OrangeStainedGlass;
        public static readonly BlockData MagentaStainedGlass;
        public static readonly BlockData LightBlueStainedGlass;
        public static readonly BlockData YellowStainedGlass;
        public static readonly BlockData LimeStainedGlass;
        public static readonly BlockData PinkStainedGlass;
        public static readonly BlockData GrayStainedGlass;
        public static readonly BlockData LightGrayStainedGlass;
        public static readonly BlockData CyanStainedGlass;
        public static readonly BlockData PurpleStainedGlass;
        public static readonly BlockData BlueStainedGlass;
        public static readonly BlockData BrownStainedGlass;
        public static readonly BlockData GreenStainedGlass;
        public static readonly BlockData RedStainedGlass;
        public static readonly BlockData BlackStainedGlass;
        public static readonly BlockData OakTrapdoor;
        public static readonly BlockData SpruceTrapdoor;
        public static readonly BlockData BirchTrapdoor;
        public static readonly BlockData JungleTrapdoor;
        public static readonly BlockData AcaciaTrapdoor;
        public static readonly BlockData DarkOakTrapdoor;
        public static readonly BlockData StoneBricks = Init(new BlockData(Material.StoneBricks).SetBreakData(1.5F, 6));
        public static readonly BlockData MossyStoneBricks = Init(new BlockData(Material.MossyStoneBricks).SetBreakData(1.5F, 6));
        public static readonly BlockData CrackedStoneBricks = Init(new BlockData(Material.CrackedStoneBricks).SetBreakData(1.5F, 6));
        public static readonly BlockData ChiseledStoneBricks = Init(new BlockData(Material.ChiseledStoneBricks).SetBreakData(1.5F, 6));
        public static readonly BlockData InfestedStone;
        public static readonly BlockData InfestedCobblestone;
        public static readonly BlockData InfestedStoneBricks;
        public static readonly BlockData InfestedMossyStoneBricks;
        public static readonly BlockData InfestedCrackedStoneBricks;
        public static readonly BlockData InfestedChiseledStoneBricks;
        public static readonly BlockData BrownMushroomBlock;
        public static readonly BlockData RedMushroomBlock;
        public static readonly BlockData MushroomStem;
        public static readonly BlockData IronBars;
        public static readonly BlockData Chain;
        public static readonly BlockData GlassPane;
        public static readonly BlockData Melon;
        public static readonly BlockData AttachedPumpkinStem;
        public static readonly BlockData AttachedMelonStem;
        public static readonly BlockData PumpkinStem;
        public static readonly BlockData MelonStem;
        public static readonly BlockData Vine;
        public static readonly BlockData OakFenceGate;
        public static readonly BlockData BrickStairs = Init(new BlockStairs(Bricks, Material.BrickStairs));
        public static readonly BlockData StoneBrickStairs = Init(new BlockStairs(StoneBricks, Material.StoneBrickStairs));
        public static readonly BlockData Mycelium;
        public static readonly BlockData LilyPad;
        public static readonly BlockData NetherBricks = Init(new BlockData(Material.NetherBricks).SetBreakData(2, 6).SetSound(SoundEffectType.NetherBricksEffect));
        public static readonly BlockData NetherBrickFence;
        public static readonly BlockData NetherBrickStairs = Init(new BlockStairs(NetherBricks, Material.NetherBrickStairs));
        public static readonly BlockData NetherWart;
        public static readonly BlockData EnchantingTable;
        public static readonly BlockData BrewingStand;
        public static readonly BlockData Cauldron;
        public static readonly BlockData EndPortal;
        public static readonly BlockData EndPortalFrame;
        public static readonly BlockData EndStone = Init(new BlockData(Material.EndStone).SetBreakData(3, 9));
        public static readonly BlockData DragonEgg;
        public static readonly BlockData RedstoneLamp;
        public static readonly BlockData Cocoa;
        public static readonly BlockData SandstoneStairs = Init(new BlockStairs(Sandstone, Material.SandstoneStairs));
        public static readonly BlockData EmeraldOre;
        public static readonly BlockData EnderChest;
        public static readonly BlockData TripwireHook;
        public static readonly BlockData Tripwire;
        public static readonly BlockData EmeraldBlock = Init(new BlockData(Material.EmeraldBlock).SetBreakData(5, 6).SetSound(SoundEffectType.MetalEffect));
        public static readonly BlockData SpruceStairs = Init(new BlockStairs(SprucePlanks, Material.SpruceStairs));
        public static readonly BlockData BirchStairs = Init(new BlockStairs(BirchPlanks, Material.BirchStairs));
        public static readonly BlockData JungleStairs = Init(new BlockStairs(JunglePlanks, Material.JungleStairs));
        public static readonly BlockData CommandBlock;
        public static readonly BlockData Beacon;
        public static readonly BlockData CobblestoneWall;
        public static readonly BlockData MossyCobblestoneWall;
        public static readonly BlockData FlowerPot;
        public static readonly BlockData PottedOakSapling;
        public static readonly BlockData PottedSpruceSapling;
        public static readonly BlockData PottedBirchSapling;
        public static readonly BlockData PottedJungleSapling;
        public static readonly BlockData PottedAcaciaSapling;
        public static readonly BlockData PottedDarkOakSapling;
        public static readonly BlockData PottedFern;
        public static readonly BlockData PottedDandelion;
        public static readonly BlockData PottedPoppy;
        public static readonly BlockData PottedBlueOrchid;
        public static readonly BlockData PottedAllium;
        public static readonly BlockData PottedAzureBluet;
        public static readonly BlockData PottedRedTulip;
        public static readonly BlockData PottedOrangeTulip;
        public static readonly BlockData PottedWhiteTulip;
        public static readonly BlockData PottedPinkTulip;
        public static readonly BlockData PottedOxeyeDaisy;
        public static readonly BlockData PottedCornflower;
        public static readonly BlockData PottedLilyOfTheValley;
        public static readonly BlockData PottedWitherRose;
        public static readonly BlockData PottedRedMushroom;
        public static readonly BlockData PottedBrownMushroom;
        public static readonly BlockData PottedDeadBush;
        public static readonly BlockData PottedCactus;
        public static readonly BlockData Carrots;
        public static readonly BlockData Potatoes;
        public static readonly BlockData OakButton;
        public static readonly BlockData SpruceButton;
        public static readonly BlockData BirchButton;
        public static readonly BlockData JungleButton;
        public static readonly BlockData AcaciaButton;
        public static readonly BlockData DarkOakButton;
        public static readonly BlockData SkeletonSkull;
        public static readonly BlockData SkeletonWallSkull;
        public static readonly BlockData WitherSkeletonSkull;
        public static readonly BlockData WitherSkeletonWallSkull;
        public static readonly BlockData ZombieHead;
        public static readonly BlockData ZombieWallHead;
        public static readonly BlockData PlayerHead;
        public static readonly BlockData PlayerWallHead;
        public static readonly BlockData CreeperHead;
        public static readonly BlockData CreeperWallHead;
        public static readonly BlockData DragonHead;
        public static readonly BlockData DragonWallHead;
        public static readonly BlockData Anvil;
        public static readonly BlockData ChippedAnvil;
        public static readonly BlockData DamagedAnvil;
        public static readonly BlockData TrappedChest;
        public static readonly BlockData LightWeightedPressurePlate;
        public static readonly BlockData HeavyWeightedPressurePlate;
        public static readonly BlockData Comparator;
        public static readonly BlockData DaylightDetector;
        public static readonly BlockData RedstoneBlock;
        public static readonly BlockData NetherQuartzOre;
        public static readonly BlockData Hopper;
        public static readonly BlockData QuartzBlock = Init(new BlockData(Material.QuartzBlock).SetDurability(.8F));
        public static readonly BlockData ChiseledQuartzBlock = Init(new BlockData(Material.ChiseledQuartzBlock).SetDurability(.8F));
        public static readonly BlockData QuartzPillar;
        public static readonly BlockData QuartzStairs = Init(new BlockStairs(QuartzBlock, Material.QuartzStairs));
        public static readonly BlockData ActivatorRail;
        public static readonly BlockData Dropper;
        public static readonly BlockData WhiteTerracotta = Init(new BlockData(Material.WhiteTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData OrangeTerracotta = Init(new BlockData(Material.OrangeTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData MagentaTerracotta = Init(new BlockData(Material.MagentaTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData LightBlueTerracotta = Init(new BlockData(Material.LightBlueTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData YellowTerracotta = Init(new BlockData(Material.YellowTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData LimeTerracotta = Init(new BlockData(Material.LimeTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData PinkTerracotta = Init(new BlockData(Material.PinkTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData GrayTerracotta = Init(new BlockData(Material.GrayTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData LightGrayTerracotta = Init(new BlockData(Material.LightGrayTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData CyanTerracotta = Init(new BlockData(Material.CyanTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData PurpleTerracotta = Init(new BlockData(Material.PurpleTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData BlueTerracotta = Init(new BlockData(Material.BlueTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData BrownTerracotta = Init(new BlockData(Material.BrownTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData GreenTerracotta = Init(new BlockData(Material.GreenTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData RedTerracotta = Init(new BlockData(Material.RedTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData BlackTerracotta = Init(new BlockData(Material.BlackTerracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData WhiteStainedGlassPane;
        public static readonly BlockData OrangeStainedGlassPane;
        public static readonly BlockData MagentaStainedGlassPane;
        public static readonly BlockData LightBlueStainedGlassPane;
        public static readonly BlockData YellowStainedGlassPane;
        public static readonly BlockData LimeStainedGlassPane;
        public static readonly BlockData PinkStainedGlassPane;
        public static readonly BlockData GrayStainedGlassPane;
        public static readonly BlockData LightGrayStainedGlassPane;
        public static readonly BlockData CyanStainedGlassPane;
        public static readonly BlockData PurpleStainedGlassPane;
        public static readonly BlockData BlueStainedGlassPane;
        public static readonly BlockData BrownStainedGlassPane;
        public static readonly BlockData GreenStainedGlassPane;
        public static readonly BlockData RedStainedGlassPane;
        public static readonly BlockData BlackStainedGlassPane;
        public static readonly BlockData AcaciaStairs = Init(new BlockStairs(AcaciaPlanks, Material.AcaciaStairs));
        public static readonly BlockData DarkOakStairs = Init(new BlockStairs(DarkOakPlanks, Material.DarkOakStairs));
        public static readonly BlockData SlimeBlock;
        public static readonly BlockData Barrier;
        public static readonly BlockData IronTrapdoor;
        public static readonly BlockData Prismarine = Init(new BlockData(Material.Prismarine).SetBreakData(1.5F, 6));
        public static readonly BlockData PrismarineBricks = Init(new BlockData(Material.PrismarineBricks).SetBreakData(1.5F, 6));
        public static readonly BlockData DarkPrismarine = Init(new BlockData(Material.DarkPrismarine).SetBreakData(1.5F, 6));
        public static readonly BlockData PrismarineStairs = Init(new BlockStairs(Prismarine, Material.PrismarineStairs));
        public static readonly BlockData PrismarineBrickStairs = Init(new BlockStairs(PrismarineBricks, Material.PrismarineBrickStairs));
        public static readonly BlockData DarkPrismarineStairs = Init(new BlockStairs(DarkPrismarine, Material.DarkPrismarineStairs));
        public static readonly BlockData PrismarineSlab;
        public static readonly BlockData PrismarineBrickSlab;
        public static readonly BlockData DarkPrismarineSlab;
        public static readonly BlockData SeaLantern = Init(new BlockData(Material.SeaLantern).SetDurability(.3F).SetSound(SoundEffectType.GlassEffect).SetLight(15));
        public static readonly BlockData HayBlock;
        public static readonly BlockData WhiteCarpet;
        public static readonly BlockData OrangeCarpet;
        public static readonly BlockData MagentaCarpet;
        public static readonly BlockData LightBlueCarpet;
        public static readonly BlockData YellowCarpet;
        public static readonly BlockData LimeCarpet;
        public static readonly BlockData PinkCarpet;
        public static readonly BlockData GrayCarpet;
        public static readonly BlockData LightGrayCarpet;
        public static readonly BlockData CyanCarpet;
        public static readonly BlockData PurpleCarpet;
        public static readonly BlockData BlueCarpet;
        public static readonly BlockData BrownCarpet;
        public static readonly BlockData GreenCarpet;
        public static readonly BlockData RedCarpet;
        public static readonly BlockData BlackCarpet;
        public static readonly BlockData Terracotta = Init(new BlockData(Material.Terracotta).SetBreakData(1.25F, 4.2F));
        public static readonly BlockData CoalBlock;
        public static readonly BlockData PackedIce;
        public static readonly BlockData Sunflower;
        public static readonly BlockData Lilac;
        public static readonly BlockData RoseBush;
        public static readonly BlockData Peony;
        public static readonly BlockData TallGrass;
        public static readonly BlockData LargeFern;
        public static readonly BlockData WhiteBanner;
        public static readonly BlockData OrangeBanner;
        public static readonly BlockData MagentaBanner;
        public static readonly BlockData LightBlueBanner;
        public static readonly BlockData YellowBanner;
        public static readonly BlockData LimeBanner;
        public static readonly BlockData PinkBanner;
        public static readonly BlockData GrayBanner;
        public static readonly BlockData LightGrayBanner;
        public static readonly BlockData CyanBanner;
        public static readonly BlockData PurpleBanner;
        public static readonly BlockData BlueBanner;
        public static readonly BlockData BrownBanner;
        public static readonly BlockData GreenBanner;
        public static readonly BlockData RedBanner;
        public static readonly BlockData BlackBanner;
        public static readonly BlockData WhiteWallBanner;
        public static readonly BlockData OrangeWallBanner;
        public static readonly BlockData MagentaWallBanner;
        public static readonly BlockData LightBlueWallBanner;
        public static readonly BlockData YellowWallBanner;
        public static readonly BlockData LimeWallBanner;
        public static readonly BlockData PinkWallBanner;
        public static readonly BlockData GrayWallBanner;
        public static readonly BlockData LightGrayWallBanner;
        public static readonly BlockData CyanWallBanner;
        public static readonly BlockData PurpleWallBanner;
        public static readonly BlockData BlueWallBanner;
        public static readonly BlockData BrownWallBanner;
        public static readonly BlockData GreenWallBanner;
        public static readonly BlockData RedWallBanner;
        public static readonly BlockData BlackWallBanner;
        public static readonly BlockData RedSandstone = Init(new BlockData(Material.RedSandstone).SetDurability(.8F));
        public static readonly BlockData ChiseledRedSandstone;
        public static readonly BlockData CutRedSandstone;
        public static readonly BlockData RedSandstoneStairs = Init(new BlockStairs(RedSandstone, Material.RedSandstoneStairs));
        public static readonly BlockData OakSlab;
        public static readonly BlockData SpruceSlab;
        public static readonly BlockData BirchSlab;
        public static readonly BlockData JungleSlab;
        public static readonly BlockData AcaciaSlab;
        public static readonly BlockData DarkOakSlab;
        public static readonly BlockData StoneSlab;
        public static readonly BlockData SmoothStoneSlab;
        public static readonly BlockData SandstoneSlab;
        public static readonly BlockData CutSandstoneSlab;
        public static readonly BlockData PetrifiedOakSlab;
        public static readonly BlockData CobblestoneSlab;
        public static readonly BlockData BrickSlab;
        public static readonly BlockData StoneBrickSlab;
        public static readonly BlockData NetherBrickSlab;
        public static readonly BlockData QuartzSlab;
        public static readonly BlockData RedSandstoneSlab;
        public static readonly BlockData CutRedSandstoneSlab;
        public static readonly BlockData PurpurSlab;
        public static readonly BlockData SmoothStone;
        public static readonly BlockData SmoothSandstone = Init(new BlockData(Material.SmoothSandstone).SetBreakData(2, 6));
        public static readonly BlockData SmoothQuartz = Init(new BlockData(Material.SmoothQuartz).SetBreakData(2, 6));
        public static readonly BlockData SmoothRedSandstone = Init(new BlockData(Material.SmoothRedSandstone).SetBreakData(2, 6));
        public static readonly BlockData SpruceFenceGate;
        public static readonly BlockData BirchFenceGate;
        public static readonly BlockData JungleFenceGate;
        public static readonly BlockData AcaciaFenceGate;
        public static readonly BlockData DarkOakFenceGate;
        public static readonly BlockData SpruceFence;
        public static readonly BlockData BirchFence;
        public static readonly BlockData JungleFence;
        public static readonly BlockData AcaciaFence;
        public static readonly BlockData DarkOakFence;
        public static readonly BlockData SpruceDoor;
        public static readonly BlockData BirchDoor;
        public static readonly BlockData JungleDoor;
        public static readonly BlockData AcaciaDoor;
        public static readonly BlockData DarkOakDoor;
        public static readonly BlockData EndRod;
        public static readonly BlockData ChorusPlant;
        public static readonly BlockData ChorusFlower;
        public static readonly BlockData PurpurBlock = Init(new BlockData(Material.PurpurBlock).SetBreakData(1.5F, 6.0F));
        public static readonly BlockData PurpurPillar;
        public static readonly BlockData PurpurStairs = Init(new BlockStairs(PurpurBlock, Material.PurpurStairs));
        public static readonly BlockData EndStoneBricks = Init(new BlockStairs(Stone, Material.EndStoneBricks));
        public static readonly BlockData Beetroots;
        public static readonly BlockData GrassPath = Init(new BlockGrassPath(Material.GrassPath).SetDurability(.65F).SetSound(SoundEffectType.GrassEffect));
        public static readonly BlockData EndGateway;
        public static readonly BlockData RepeatingCommandBlock;
        public static readonly BlockData ChainCommandBlock;
        public static readonly BlockData FrostedIce;
        public static readonly BlockData MagmaBlock;
        public static readonly BlockData NetherWartBlock = Init(new BlockData(Material.NetherWartBlock).SetDurability(1).SetSound(SoundEffectType.WartEffect));
        public static readonly BlockData RedNetherBricks = Init(new BlockData(Material.RedNetherBricks).SetBreakData(2, 6).SetSound(SoundEffectType.NetherBricksEffect));
        public static readonly BlockData BoneBlock;
        public static readonly BlockData StructureVoid;
        public static readonly BlockData Observer;
        public static readonly BlockData ShulkerBox;
        public static readonly BlockData WhiteShulkerBox;
        public static readonly BlockData OrangeShulkerBox;
        public static readonly BlockData MagentaShulkerBox;
        public static readonly BlockData LightBlueShulkerBox;
        public static readonly BlockData YellowShulkerBox;
        public static readonly BlockData LimeShulkerBox;
        public static readonly BlockData PinkShulkerBox;
        public static readonly BlockData GrayShulkerBox;
        public static readonly BlockData LightGrayShulkerBox;
        public static readonly BlockData CyanShulkerBox;
        public static readonly BlockData PurpleShulkerBox;
        public static readonly BlockData BlueShulkerBox;
        public static readonly BlockData BrownShulkerBox;
        public static readonly BlockData GreenShulkerBox;
        public static readonly BlockData RedShulkerBox;
        public static readonly BlockData BlackShulkerBox;
        public static readonly BlockData WhiteGlazedTerracotta;
        public static readonly BlockData OrangeGlazedTerracotta;
        public static readonly BlockData MagentaGlazedTerracotta;
        public static readonly BlockData LightBlueGlazedTerracotta;
        public static readonly BlockData YellowGlazedTerracotta;
        public static readonly BlockData LimeGlazedTerracotta;
        public static readonly BlockData PinkGlazedTerracotta;
        public static readonly BlockData GrayGlazedTerracotta;
        public static readonly BlockData LightGrayGlazedTerracotta;
        public static readonly BlockData CyanGlazedTerracotta;
        public static readonly BlockData PurpleGlazedTerracotta;
        public static readonly BlockData BlueGlazedTerracotta;
        public static readonly BlockData BrownGlazedTerracotta;
        public static readonly BlockData GreenGlazedTerracotta;
        public static readonly BlockData RedGlazedTerracotta;
        public static readonly BlockData BlackGlazedTerracotta;
        public static readonly BlockData WhiteConcrete;
        public static readonly BlockData OrangeConcrete;
        public static readonly BlockData MagentaConcrete;
        public static readonly BlockData LightBlueConcrete;
        public static readonly BlockData YellowConcrete;
        public static readonly BlockData LimeConcrete;
        public static readonly BlockData PinkConcrete;
        public static readonly BlockData GrayConcrete;
        public static readonly BlockData LightGrayConcrete;
        public static readonly BlockData CyanConcrete;
        public static readonly BlockData PurpleConcrete;
        public static readonly BlockData BlueConcrete;
        public static readonly BlockData BrownConcrete;
        public static readonly BlockData GreenConcrete;
        public static readonly BlockData RedConcrete;
        public static readonly BlockData BlackConcrete;
        public static readonly BlockData WhiteConcretePowder;
        public static readonly BlockData OrangeConcretePowder;
        public static readonly BlockData MagentaConcretePowder;
        public static readonly BlockData LightBlueConcretePowder;
        public static readonly BlockData YellowConcretePowder;
        public static readonly BlockData LimeConcretePowder;
        public static readonly BlockData PinkConcretePowder;
        public static readonly BlockData GrayConcretePowder;
        public static readonly BlockData LightGrayConcretePowder;
        public static readonly BlockData CyanConcretePowder;
        public static readonly BlockData PurpleConcretePowder;
        public static readonly BlockData BlueConcretePowder;
        public static readonly BlockData BrownConcretePowder;
        public static readonly BlockData GreenConcretePowder;
        public static readonly BlockData RedConcretePowder;
        public static readonly BlockData BlackConcretePowder;
        public static readonly BlockData Kelp;
        public static readonly BlockData KelpPlant;
        public static readonly BlockData DriedKelpBlock;
        public static readonly BlockData TurtleEgg;
        public static readonly BlockData DeadTubeCoralBlock;
        public static readonly BlockData DeadBrainCoralBlock;
        public static readonly BlockData DeadBubbleCoralBlock;
        public static readonly BlockData DeadFireCoralBlock;
        public static readonly BlockData DeadHornCoralBlock;
        public static readonly BlockData TubeCoralBlock;
        public static readonly BlockData BrainCoralBlock;
        public static readonly BlockData BubbleCoralBlock;
        public static readonly BlockData FireCoralBlock;
        public static readonly BlockData HornCoralBlock;
        public static readonly BlockData DeadTubeCoral;
        public static readonly BlockData DeadBrainCoral;
        public static readonly BlockData DeadBubbleCoral;
        public static readonly BlockData DeadFireCoral;
        public static readonly BlockData DeadHornCoral;
        public static readonly BlockData TubeCoral;
        public static readonly BlockData BrainCoral;
        public static readonly BlockData BubbleCoral;
        public static readonly BlockData FireCoral;
        public static readonly BlockData HornCoral;
        public static readonly BlockData DeadTubeCoralFan;
        public static readonly BlockData DeadBrainCoralFan;
        public static readonly BlockData DeadBubbleCoralFan;
        public static readonly BlockData DeadFireCoralFan;
        public static readonly BlockData DeadHornCoralFan;
        public static readonly BlockData TubeCoralFan;
        public static readonly BlockData BrainCoralFan;
        public static readonly BlockData BubbleCoralFan;
        public static readonly BlockData FireCoralFan;
        public static readonly BlockData HornCoralFan;
        public static readonly BlockData DeadTubeCoralWallFan;
        public static readonly BlockData DeadBrainCoralWallFan;
        public static readonly BlockData DeadBubbleCoralWallFan;
        public static readonly BlockData DeadFireCoralWallFan;
        public static readonly BlockData DeadHornCoralWallFan;
        public static readonly BlockData TubeCoralWallFan;
        public static readonly BlockData BrainCoralWallFan;
        public static readonly BlockData BubbleCoralWallFan;
        public static readonly BlockData FireCoralWallFan;
        public static readonly BlockData HornCoralWallFan;
        public static readonly BlockData SeaPickle;
        public static readonly BlockData BlueIce;
        public static readonly BlockData Conduit;
        public static readonly BlockData BambooSapling;
        public static readonly BlockData Bamboo;
        public static readonly BlockData PottedBamboo;
        public static readonly BlockData VoidAir;
        public static readonly BlockData CaveAir;
        public static readonly BlockData BubbleColumn;
        public static readonly BlockData PolishedGraniteStairs = Init(new BlockStairs(PolishedGranite, Material.PolishedGraniteStairs));
        public static readonly BlockData SmoothRedSandstoneStairs = Init(new BlockStairs(SmoothRedSandstone, Material.SmoothRedSandstoneStairs));
        public static readonly BlockData MossyStoneBrickStairs = Init(new BlockStairs(MossyStoneBricks, Material.MossyStoneBrickStairs));
        public static readonly BlockData PolishedDioriteStairs = Init(new BlockStairs(PolishedDiorite, Material.PolishedDioriteStairs));
        public static readonly BlockData MossyCobblestoneStairs = Init(new BlockStairs(MossyCobblestone, Material.MossyCobblestoneStairs));
        public static readonly BlockData EndStoneBrickStairs = Init(new BlockStairs(EndStoneBricks, Material.EndStoneBrickStairs));
        public static readonly BlockData StoneStairs = Init(new BlockStairs(Stone, Material.StoneStairs));
        public static readonly BlockData SmoothSandstoneStairs = Init(new BlockStairs(SmoothSandstone, Material.SmoothSandstoneStairs));
        public static readonly BlockData SmoothQuartzStairs = Init(new BlockStairs(SmoothQuartz, Material.SmoothQuartzStairs));
        public static readonly BlockData GraniteStairs = Init(new BlockStairs(Granite, Material.GraniteStairs));
        public static readonly BlockData AndesiteStairs = Init(new BlockStairs(Andesite, Material.AndesiteStairs));
        public static readonly BlockData RedNetherBrickStairs = Init(new BlockStairs(RedNetherBricks, Material.RedNetherBrickStairs));
        public static readonly BlockData PolishedAndesiteStairs = Init(new BlockStairs(PolishedAndesite, Material.PolishedAndesiteStairs));
        public static readonly BlockData DioriteStairs = Init(new BlockStairs(Diorite, Material.DioriteStairs));
        public static readonly BlockData PolishedGraniteSlab;
        public static readonly BlockData SmoothRedSandstoneSlab;
        public static readonly BlockData MossyStoneBrickSlab;
        public static readonly BlockData PolishedDioriteSlab;
        public static readonly BlockData MossyCobblestoneSlab;
        public static readonly BlockData EndStoneBrickSlab;
        public static readonly BlockData SmoothSandstoneSlab;
        public static readonly BlockData SmoothQuartzSlab;
        public static readonly BlockData GraniteSlab;
        public static readonly BlockData AndesiteSlab;
        public static readonly BlockData RedNetherBrickSlab;
        public static readonly BlockData PolishedAndesiteSlab;
        public static readonly BlockData DioriteSlab;
        public static readonly BlockData BrickWall;
        public static readonly BlockData PrismarineWall;
        public static readonly BlockData RedSandstoneWall;
        public static readonly BlockData MossyStoneBrickWall;
        public static readonly BlockData GraniteWall;
        public static readonly BlockData StoneBrickWall;
        public static readonly BlockData NetherBrickWall;
        public static readonly BlockData AndesiteWall;
        public static readonly BlockData RedNetherBrickWall;
        public static readonly BlockData SandstoneWall;
        public static readonly BlockData EndStoneBrickWall;
        public static readonly BlockData DioriteWall;
        public static readonly BlockData Scaffolding;
        public static readonly BlockData Loom;
        public static readonly BlockData Barrel;
        public static readonly BlockData Smoker;
        public static readonly BlockData BlastFurnace;
        public static readonly BlockData CartographyTable;
        public static readonly BlockData FletchingTable;
        public static readonly BlockData Grindstone;
        public static readonly BlockData Lectern;
        public static readonly BlockData SmithingTable;
        public static readonly BlockData Stonecutter = Init(new BlockStonecutter(Material.Stonecutter).SetDurability(3.5F));
        public static readonly BlockData Bell;
        public static readonly BlockData Lantern;
        public static readonly BlockData SoulLantern;
        public static readonly BlockData Campfire;
        public static readonly BlockData SoulCampfire;
        public static readonly BlockData SweetBerryBush;
        public static readonly BlockData WarpedStem;
        public static readonly BlockData StrippedWarpedStem;
        public static readonly BlockData WarpedHyphae;
        public static readonly BlockData StrippedWarpedHyphae;
        public static readonly BlockData WarpedNylium;
        public static readonly BlockData WarpedFungus;
        public static readonly BlockData WarpedWartBlock;
        public static readonly BlockData WarpedRoots;
        public static readonly BlockData NetherSprouts;
        public static readonly BlockData CrimsonStem;
        public static readonly BlockData StrippedCrimsonStem;
        public static readonly BlockData CrimsonHyphae;
        public static readonly BlockData StrippedCrimsonHyphae;
        public static readonly BlockData CrimsonNylium;
        public static readonly BlockData CrimsonFungus;
        public static readonly BlockData Shroomlight;
        public static readonly BlockData WeepingVines;
        public static readonly BlockData WeepingVinesPlant;
        public static readonly BlockData TwistingVines;
        public static readonly BlockData TwistingVinesPlant;
        public static readonly BlockData CrimsonRoots;
        public static readonly BlockData CrimsonPlanks = Init(new BlockData(Material.CrimsonPlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData WarpedPlanks = Init(new BlockData(Material.WarpedPlanks).SetBreakData(2, 3).SetSound(SoundEffectType.WoodEffect));
        public static readonly BlockData CrimsonSlab;
        public static readonly BlockData WarpedSlab;
        public static readonly BlockData CrimsonPressurePlate;
        public static readonly BlockData WarpedPressurePlate;
        public static readonly BlockData CrimsonFence;
        public static readonly BlockData CrimsonTrapdoor;
        public static readonly BlockData WarpedTrapdoor;
        public static readonly BlockData CrimsonFenceGate;
        public static readonly BlockData WarpedFenceGate;
        public static readonly BlockData CrimsonStairs = Init(new BlockStairs(CrimsonPlanks, Material.CrimsonStairs));
        public static readonly BlockData WarpedStairs = Init(new BlockStairs(WarpedPlanks, Material.WarpedStairs));
        public static readonly BlockData CrimsonButton;
        public static readonly BlockData WarpedButton;
        public static readonly BlockData CrimsonDoor;
        public static readonly BlockData WarpedDoor;
        public static readonly BlockData CrimsonSign;
        public static readonly BlockData WarpedSign;
        public static readonly BlockData CrimsonWallSign;
        public static readonly BlockData WarpedWallSign;
        public static readonly BlockData StructureBlock;
        public static readonly BlockData Jigsaw;
        public static readonly BlockData Composter;
        public static readonly BlockData Target;
        public static readonly BlockData BeeNest;
        public static readonly BlockData Beehive;
        public static readonly BlockData HoneyBlock;
        public static readonly BlockData HoneycombBlock;
        public static readonly BlockData NetheriteBlock;
        public static readonly BlockData AncientDebris;
        public static readonly BlockData CryingObsidian;
        public static readonly BlockData RespawnAnchor;
        public static readonly BlockData PottedCrimsonFungus;
        public static readonly BlockData PottedWarpedFungus;
        public static readonly BlockData PottedCrimsonRoots;
        public static readonly BlockData PottedWarpedRoots;
        public static readonly BlockData Lodestone;
        public static readonly BlockData Blackstone = Init(new BlockData(Material.Blackstone).SetBreakData(1.5F, 6));
        public static readonly BlockData BlackstoneStairs = Init(new BlockStairs(Blackstone, Material.BlackstoneStairs));
        public static readonly BlockData BlackstoneWall;
        public static readonly BlockData BlackstoneSlab;
        public static readonly BlockData PolishedBlackstone = Init(new BlockData(Material.PolishedBlackstone).SetBreakData(2, 6));
        public static readonly BlockData PolishedBlackstoneBricks = Init(new BlockData(Material.PolishedBlackstoneBricks).SetBreakData(1.5F, 6.0F));
        public static readonly BlockData CrackedPolishedBlackstoneBricks;
        public static readonly BlockData ChiseledPolishedBlackstone;
        public static readonly BlockData PolishedBlackstoneBrickSlab;
        public static readonly BlockData PolishedBlackstoneBrickStairs = Init(new BlockStairs(PolishedBlackstoneBricks, Material.PolishedBlackstoneBrickStairs));
        public static readonly BlockData PolishedBlackstoneBrickWall;
        public static readonly BlockData GildedBlackstone;
        public static readonly BlockData PolishedBlackstoneStairs = Init(new BlockStairs(PolishedBlackstone, Material.PolishedBlackstoneStairs));
        public static readonly BlockData PolishedBlackstoneSlab;
        public static readonly BlockData PolishedBlackstonePressurePlate;
        public static readonly BlockData PolishedBlackstoneButton;
        public static readonly BlockData PolishedBlackstoneWall;
        public static readonly BlockData ChiseledNetherBricks;
        public static readonly BlockData CrackedNetherBricks;
        public static readonly BlockData QuartzBricks = Init(new BlockData(Material.QuartzBricks));

        private static BlockData Init(BlockData blockData)
        {
            BlockData.Materials.Add($"{MinecraftServer.MinecraftKey}{blockData.Type.GetName()}", blockData);
            return blockData;
        }

        internal static void InitBlocks()
        {
            Air.Update(null);
            foreach (var (_, blockData) in BlockData.Materials)
            {
                var id = blockData.Type.GetLegacyId() << 4 | blockData.Type.GetLegacySubId();
                BlockData.LegacyMaterials.TryAdd(id, blockData);
            }
        }
    }
}